server {
    server_name {{ domain }};
    
    # todo: Configure trusted domains and proxies to use proxy inside docker network
    location / {
        proxy_pass      http://{{ pihost }}:{{ homepage_port }};
    }
}

server {
    server_name nextcloud.{{ domain }};
    
    # todo: Configure trusted domains and proxies to use proxy inside docker network
    location / {
        proxy_pass      http://{{ pihost }}:{{ nextcloud_port }};
    }    

    client_max_body_size 1G;
}

server {
    server_name pihole.{{ domain }};

    # Prefer to call pihole by ip
    rewrite ^/(.*)$ http://{{ pihost }}:{{ pihole_port }}/$1 permanent;
}

server {
    server_name radarr.{{ domain }};

    location / {
        rewrite ^/(.*)$ http://{{ pihost }}:{{ radarr_port }}/$1 permanent;
    }
}

server {
    server_name sonarr.{{ domain }};

    location / {
        rewrite ^/(.*)$ http://{{ pihost }}:{{ sonarr_port }}/$1 permanent;
    }
}

server {
    server_name paisa.{{ domain }};

    location / {
        rewrite ^/(.*)$ http://budget.{{ domain }}/$1 permanent;
    }
}

server {
    server_name budget.{{ domain }};

    location / {
        proxy_pass      http://{{ pihost }}:{{ paisa_port }};
    }
}

server {
    server_name paperless.{{ domain }};

    location / {
        proxy_pass      http://{{ pihost }}:{{ paperless_port }};
    }

    client_max_body_size 1G;
}

server {
    listen 80;
    listen [::]:80;
    server_name jellyfin.{{ domain }};

    ## The default `client_max_body_size` is 1M, this might not be enough for some posters, etc.
    client_max_body_size 20M;

    # use a variable to store the upstream proxy
    # in this example we are using a hostname which is resolved via DNS
    # (if you aren't using DNS remove the resolver line and change the variable to point to an IP address e.g `set $jellyfin 127.0.0.1`)
    set $jellyfin {{ pihost }};
    resolver 127.0.0.1 valid=30;

    # Security / XSS Mitigation Headers
    # NOTE: X-Frame-Options may cause issues with the webOS app
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    location = / {
        return 302 http://$host/web/;
    }

    location / {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:{{ jellyfin_port }};
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;

        # Disable buffering when the nginx proxy gets very resource heavy upon streaming
        proxy_buffering off;
    }

    # location block for /web - This is purely for aesthetics so /web/#!/ works instead of having to go to /web/index.html/#!/
    location = /web/ {
        # Proxy main Jellyfin traffic
        proxy_pass http://$jellyfin:{{ jellyfin_port }}/web/index.html;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }

    location /socket {
        # Proxy Jellyfin Websockets traffic
        proxy_pass http://$jellyfin:{{ jellyfin_port }};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Protocol $scheme;
        proxy_set_header X-Forwarded-Host $http_host;
    }
}
